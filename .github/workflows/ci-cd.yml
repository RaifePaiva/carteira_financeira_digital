
name: CI/CD Pipeline

on:
  push:  # Executa os testes em qualquer push
    branches:
      - '**'   # Qualquer branch
  pull_request:  # Executa o build apenas nas branches específicas
    branches:
      - dev
      - hom
      - main
      - master
      - prod
  workflow_dispatch:

env:
  IMAGE_NAME: raife/carteira_financeira_digital

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt' # Instala o JDK do Temurin
          java-version: '17'

      - name: Set up Kotlin
        run: sudo apt-get install -y kotlin

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn test
        continue-on-error: false
        # Incluir logs da operação de teste
        env:
          MAVEN_OPTS: '-Dmaven.test.failure.ignore=false'

      - name: Run JaCoCo coverage analysis
        run: mvn jacoco:report
        continue-on-error: false

#      - name: Check test coverage
#        id: check-coverage
#        run: |
#          COVERAGE=$(mvn jacoco:check | grep -Po '(?<=INSTRUCTION).*?[\d.]+(?=%)')
#          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
#            echo "Test coverage is below 85%, aborting..."
#            exit 1
#          else
#            echo "Test coverage is sufficient ($COVERAGE%), continuing..."
#          fi

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build the artifact
        run: mvn clean package -DskipTests
        continue-on-error: false

      # Definir a variavel branch name
      - name: Set BUILD_TAG
        run: |
          echo BUILD_TAG=$(echo ${{ github.head_ref || github.ref_name }} | sed "s,/,_,g")-${{ github.run_number }} >> $GITHUB_ENV
      # Print BUILD_TAG
      - name: Print BUILD_TAG
        run: |
          echo "Branch     ---> ${{ github.head_ref || github.ref_name }}"
          echo "Run number ---> ${{ github.run_number }}"
          echo "Tag        ---> ${{ env.BUILD_TAG }}"

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PWD }}
      # Build & Deploy da imagem
      - name: Build & push da imagem do docker
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: VERSION=${{ env.BUILD_TAG }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.BUILD_TAG }}